create table bitacora(    bitacoracod    int auto_increment        primary key,    bitacorafch    datetime     null,    bitprograma    varchar(255) null,    bitdescripcion varchar(255) null,    bitobservacion mediumtext   null,    bitTipo        char(3)      null,    bitusuario     bigint(18)   null);create table funciones(    fncod varchar(255) not null        primary key,    fndsc varchar(255) null,    fnest char(3)      null,    fntyp char(3)      null);create table roles(    rolescod varchar(128) not null        primary key,    rolesdsc varchar(45)  null,    rolesest char(3)      null);create table funciones_roles(    rolescod varchar(128) not null,    fncod    varchar(255) not null,    fnrolest char(3)      null,    fnexp    datetime     null,    primary key (rolescod, fncod),    constraint funcion_rol_key        foreign key (rolescod) references roles (rolescod),    constraint rol_funcion_key        foreign key (fncod) references funciones (fncod));create index rol_funcion_key_idx    on funciones_roles (fncod);create table serviciocategoria(    categoriaId     int auto_increment        primary key,    categoriaNombre varchar(60) null);create table servicioplataforma(    plataformaId     int auto_increment        primary key,    plataformaNombre varchar(60) null);create table servicios(    servicioid          int auto_increment        primary key,    servicioNombre      varchar(60)                             not null,    servicioPrecio      float                                   not null,    categoriaId         int                                     null,    servicioTipoId      int                                     null,    servicioDescripcion varchar(200)                            not null,    servicioImagen      varchar(100)                            not null,    plataformaId        int                                     not null,    stock               int                                     not null,    fecha_agregado      timestamp   default current_timestamp() not null,    servicioEstatus     varchar(20) default 'ACT'               not null,    constraint servicios_ibfk_1        foreign key (categoriaId) references serviciocategoria (categoriaId),    constraint servicios_ibfk_2        foreign key (servicioTipoId) references servicioplataforma (plataformaId),    constraint servicios_ibfk_4        foreign key (plataformaId) references servicioplataforma (plataformaId));create table carretillaanon(    anoncod    varchar(128)   not null,    servicioId int            not null,    crrctd     int(5)         not null,    crrprc     decimal(12, 2) not null,    crrfching  datetime       not null,    primary key (anoncod, servicioId),    constraint carretillaanon_prd_key        foreign key (servicioId) references servicios (servicioid));create index serviceId_idx    on carretillaanon (servicioId);create index categoriaId    on servicios (categoriaId);create index productoTipoId    on servicios (servicioTipoId);create index productos_ibfk_4    on servicios (plataformaId);create table serviciotipo(    servicioTipoId   int auto_increment        primary key,    servicioTipoDesc varchar(30) null);create table usuario(    usercod     bigint(10) auto_increment        primary key,    useremail   varchar(80)  null,    username    varchar(80)  null,    userpswd    varchar(128) null,    userfching  datetime     null,    userpswdest char(3)      null,    userpswdexp datetime     null,    userest     char(3)      null,    useractcod  varchar(128) null,    userpswdchg varchar(128) null,    usertipo    char(3)      null comment 'Tipo de Usuario, Normal, Consultor o Cliente',    constraint useremail_UNIQUE        unique (useremail));create table carretilla(    usercod    bigint(10)     not null,    serviceId  int            not null,    crrctd     int(5)         not null,    crrprc     decimal(12, 2) not null,    crrfching  datetime       not null,    id_session varchar(255)   not null,    primary key (usercod, serviceId),    constraint carretilla_prd_key        foreign key (serviceId) references servicios (servicioid),    constraint carretilla_user_key        foreign key (usercod) references usuario (usercod));create index serviceIdidx    on carretilla (serviceId);create table ordenes(    orderId     varchar(255)                         not null        primary key,    fechaCompra datetime default current_timestamp() null,    clienteId   bigint(10)                           null,    status      varchar(20)                          null,    cantidad    float                                null,    constraint ordenes_ibfk_2        foreign key (clienteId) references usuario (usercod));create index clienteId    on ordenes (clienteId);create trigger deleteCartProducts    after insert    on ordenes    for each rowBEGIN    DELETE FROM carretilla WHERE usercod = NEW.clienteId;END;create table roles_usuarios(    usercod     bigint(10)   not null,    rolescod    varchar(128) not null,    roleuserest char(3)      null,    roleuserfch datetime     null,    roleuserexp datetime     null,    primary key (usercod, rolescod),    constraint rol_usuario_key        foreign key (rolescod) references roles (rolescod),    constraint usuario_rol_key        foreign key (usercod) references usuario (usercod));create index rol_usuario_key_idx    on roles_usuarios (rolescod);create index usertipo    on usuario (usertipo, useremail, usercod, userest);create view getallservicios asselect `ecommerce`.`servicios`.`servicioid`                AS `servicioId`,       `ecommerce`.`servicios`.`servicioNombre`            AS `servicioNombre`,       `ecommerce`.`servicios`.`servicioDescripcion`       AS `servicioDescripcion`,       `ecommerce`.`servicios`.`servicioPrecio`            AS `servicioPrecio`,       `ecommerce`.`servicios`.`servicioImagen`            AS `servicioImagen`,       `ecommerce`.`servicios`.`stock`                     AS `stock`,       `ecommerce`.`serviciotipo`.`servicioTipoDesc`       AS `servicioTipo`,       `ecommerce`.`servicioplataforma`.`plataformaNombre` AS `servicioPlataforma`,       `ecommerce`.`serviciocategoria`.`categoriaNombre`   AS `servicioCategoria`,       case           when `ecommerce`.`servicios`.`stock` > 25 then 'bg-green-700'           when `ecommerce`.`servicios`.`stock` > 15 then 'bg-yellow-700'           else 'bg-red-700' end                           AS `stockStatus`from (((`ecommerce`.`servicios` join `ecommerce`.`serviciotipo` on (`ecommerce`.`serviciotipo`.`servicioTipoId` =                                                                    `ecommerce`.`servicios`.`servicioTipoId`)) join `ecommerce`.`servicioplataforma`       on (`ecommerce`.`servicioplataforma`.`plataformaId` =           `ecommerce`.`servicios`.`plataformaId`)) join `ecommerce`.`serviciocategoria`      on (`ecommerce`.`serviciocategoria`.`categoriaId` = `ecommerce`.`servicios`.`categoriaId`));create view getgamesproducts asselect `ecommerce`.`servicios`.`servicioid`                AS `productoId`,       `ecommerce`.`servicios`.`servicioNombre`            AS `productoNombre`,       `ecommerce`.`servicios`.`servicioDescripcion`       AS `productoDescripcion`,       `ecommerce`.`servicios`.`servicioPrecio`            AS `productoPrecio`,       `ecommerce`.`servicios`.`servicioImagen`            AS `productoImagen`,       `ecommerce`.`serviciotipo`.`servicioTipoDesc`       AS `productoTipoDesc`,       `ecommerce`.`servicioplataforma`.`plataformaNombre` AS `plataformaNombre`from ((`ecommerce`.`servicios` join `ecommerce`.`serviciotipo` on (`ecommerce`.`serviciotipo`.`servicioTipoId` =                                                                   `ecommerce`.`servicios`.`servicioTipoId`)) join `ecommerce`.`servicioplataforma`      on (`ecommerce`.`servicioplataforma`.`plataformaId` = `ecommerce`.`servicios`.`plataformaId`))where `ecommerce`.`serviciotipo`.`servicioTipoDesc` = 'Juego';create view getgiftcardsproducts asselect `ecommerce`.`servicios`.`servicioid`                AS `productoId`,       `ecommerce`.`servicios`.`servicioNombre`            AS `productoNombre`,       `ecommerce`.`servicios`.`servicioDescripcion`       AS `productoDescripcion`,       `ecommerce`.`servicios`.`servicioPrecio`            AS `productoPrecio`,       `ecommerce`.`servicios`.`servicioImagen`            AS `productoImagen`,       `ecommerce`.`serviciotipo`.`servicioTipoDesc`       AS `productoTipoDesc`,       `ecommerce`.`servicioplataforma`.`plataformaNombre` AS `plataformaNombre`from ((`ecommerce`.`servicios` join `ecommerce`.`serviciotipo` on (`ecommerce`.`serviciotipo`.`servicioTipoId` =                                                                   `ecommerce`.`servicios`.`servicioTipoId`)) join `ecommerce`.`servicioplataforma`      on (`ecommerce`.`servicioplataforma`.`plataformaId` = `ecommerce`.`servicios`.`plataformaId`))where `ecommerce`.`serviciotipo`.`servicioTipoDesc` = 'GiftCard';create view getofferproducts asselect `ecommerce`.`servicios`.`servicioNombre`                                                   AS `productoNombre`,       `ecommerce`.`servicios`.`servicioDescripcion`                                              AS `productoDescripcion`,       `ecommerce`.`servicios`.`servicioPrecio`                                                   AS `productoPrecio`,       `ecommerce`.`servicios`.`servicioPrecio` - `ecommerce`.`servicios`.`servicioPrecio` *                                                  0.10                                            AS `productoPrecioDescuento`,       `ecommerce`.`servicios`.`servicioImagen`                                                   AS `productoImagen`,       `ecommerce`.`serviciotipo`.`servicioTipoDesc`                                              AS `productoTipoDesc`,       `ecommerce`.`servicioplataforma`.`plataformaNombre`                                        AS `plataformaNombre`from ((`ecommerce`.`servicios` join `ecommerce`.`serviciotipo` on (`ecommerce`.`serviciotipo`.`servicioTipoId` =                                                                   `ecommerce`.`servicios`.`servicioTipoId`)) join `ecommerce`.`servicioplataforma`      on (`ecommerce`.`servicioplataforma`.`plataformaId` = `ecommerce`.`servicios`.`plataformaId`))where `ecommerce`.`serviciotipo`.`servicioTipoDesc` = 'Oferta';create view getserviciobyid asselect `ecommerce`.`servicios`.`servicioid`                AS `servicioId`,       `ecommerce`.`servicios`.`servicioNombre`            AS `servicioNombre`,       `ecommerce`.`servicios`.`servicioDescripcion`       AS `servicioDescripcion`,       `ecommerce`.`servicios`.`servicioPrecio`            AS `servicioPrecio`,       `ecommerce`.`servicios`.`servicioImagen`            AS `servicioImagen`,       `ecommerce`.`servicios`.`stock`                     AS `stock`,       `ecommerce`.`serviciotipo`.`servicioTipoDesc`       AS `servicioTipoDesc`,       `ecommerce`.`servicioplataforma`.`plataformaNombre` AS `plataformaNombre`,       `ecommerce`.`serviciocategoria`.`categoriaNombre`   AS `categoriaNombre`from (((`ecommerce`.`servicios` join `ecommerce`.`serviciotipo` on (`ecommerce`.`serviciotipo`.`servicioTipoId` =                                                                    `ecommerce`.`servicios`.`servicioTipoId`)) join `ecommerce`.`servicioplataforma`       on (`ecommerce`.`servicioplataforma`.`plataformaId` =           `ecommerce`.`servicios`.`plataformaId`)) join `ecommerce`.`serviciocategoria`      on (`ecommerce`.`serviciocategoria`.`categoriaId` = `ecommerce`.`servicios`.`categoriaId`))order by `ecommerce`.`servicios`.`servicioid`;