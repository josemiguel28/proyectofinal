<?phpnamespace Dao\CartV2;use Dao\Table;class CartV2 extends Table{    public static function agregarProductoAlCarrito    ($usercod,     $serviceId,     $crrctd,     $crrprc,     $crrfching,     $id_session    )    {        /*        $sql = "INSERT INTO carretilla  (usercod, serviceId, crrctd, crrprc,crrfching,id_session)         VALUES (:usercod, :serviceId, :crrctd, :crrctd,:crrfching, :id_session)";        $params = array(            "usercod" => $usercod,            "serviceId" => $serviceId,            "crrctd" => $crrctd,            "crrprc" => $crrprc,            "crrfching" => $crrfching,            "id_session" => $id_session        );        return self::executeNonQuery($sql, $params);*/        // revisa si el producto ya estÃ¡ en la carretilla        $sql = "SELECT * FROM carretilla WHERE usercod = :usercod AND serviceId = :serviceId";        $existingRecord = self::obtenerUnRegistro($sql, ["usercod" => $usercod, "serviceId" => $serviceId]);        if ($existingRecord) {            // si ya existe, actualizalo            $sql = "UPDATE carretilla SET crrctd = :crrctd, crrprc = :crrprc, crrfching = :crrfching, id_session = :id_session WHERE usercod = :usercod AND serviceId = :serviceId";        } else {            // si no existe, insertalo            $sql = "INSERT INTO carretilla  (usercod, serviceId, crrctd, crrprc,crrfching,id_session)         VALUES (:usercod, :serviceId, :crrctd, :crrctd,:crrfching, :id_session)";        }        $params = array(            "usercod" => $usercod,            "serviceId" => $serviceId,            "crrctd" => $crrctd,            "crrprc" => $crrprc,            "crrfching" => $crrfching,            "id_session" => $id_session        );        return self::executeNonQuery($sql, $params);            }    public static function obtenerIdProductoEnCarrito($id_session)    {        $sql = "SELECT servicioId FROM carretilla WHERE id_session = :id_session;";        return self::obtenerUnRegistro($sql, ["id_session" => $id_session]);    }    public static function eliminarProductoCarrito($usercod, $servicioId)    {        $sql = "DELETE FROM carretilla WHERE usercod = :usercod AND serviceId = :servicioId;";                $params = ["usercod" => $usercod,            "servicioId" => $servicioId        ];                return self::executeNonQuery($sql, $params);    }    public static function obtenerProductosEnCarrito($usercod)    {        $sql = "select ecommerce.servicios.servicioid as 'ID',                       ecommerce.servicios.servicioNombre as 'Nombre',                       ecommerce.servicios.servicioDescripcion as 'Descripcion',                       ecommerce.servicios.servicioPrecio as 'Precio',                       ecommerce.servicios.servicioImagen as 'Imagen',                       ecommerce.carretilla.crrctd as 'Cantidad',                       ecommerce.serviciocategoria.categoriaNombre as 'Categoria'                        from servicios                        inner join carretilla on servicios.servicioid = carretilla.serviceId                        inner join serviciocategoria on servicios.categoriaId = serviciocategoria.categoriaId                        where carretilla.usercod =:usercod ";        return self::obtenerRegistros($sql, ["usercod" => $usercod]);    }    public static function insertarOrden($orderId, $clienteId,$status, $amount)    {        $sql = "INSERT INTO ordenes (orderId ,clienteId,                     status,cantidad)                 VALUES (:orderId,                        :clienteId,                        :status,                        :cantidad)";        $params = [            "orderId" => $orderId,            "clienteId" => $clienteId,            "status" => $status,            "cantidad" => $amount,        ];                return self::executeNonQuery($sql, $params);    }        public static function getOrdenes($clienteId)    {        $sql = "SELECT * FROM ordenes where clienteId = :clienteId";                return self::obtenerRegistros($sql, ["clienteId" => $clienteId]);    }}